Token **tokenTable = NULL;
int idx = 0;
int size = 0;


int evaluate(Tokenizer *tokenizer){
 Token *token = getToken(tokenizer);
 return 10;
}

Token fake_getToken(Tokenizer * Tokenizer,int NumCalls){
Token *token;
 if(idx<size){
	return tokenTable[idx++];
 }
 else{
  token = createNullToken();
  return token;
  }

}

Tokenizer * Tokenizer fake_createTokenizer(char * str,int NumCalls){
	return 0xbadface;			// Return a fake Tokenizer
}


void initFakeTokens(Token **tokens){
 tokenTable = tokens;
 int idx =0;
 size = 0;
}

void test_getToken_given_(void){
 Token *token;
 Tokenizer *tokenizer;
 int result;
 Token tokenTable []= {
 createIntegerToken(123, "123"),
 createOperatorToken("+","+"),
 createIntegerToken(8,"8")
};

 tokenizer = createTokenizer("123 + 8");
 result = evaluate(tokenizer);

 TEST_ASSERT_EQUAL(131, result);
}
